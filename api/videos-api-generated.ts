/* tslint:disable */
/* eslint-disable */
/*
Tavus Developer API Collection

We're an AI video research company making personalized video possible at scale. Generate videos of yourself, and never record again! Available via web app & developer APIs.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { VideosCreateVideoFromReplicaAndScriptRequest } from '../models';
// @ts-ignore
import { VideosCreateVideoFromReplicaAndScriptResponse } from '../models';
// @ts-ignore
import { VideosGetAllResponse } from '../models';
// @ts-ignore
import { VideosGetByVideoIdResponse } from '../models';
// @ts-ignore
import { VideosUpdateNameRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * VideosApi - axios parameter creator
 * @export
 */
export const VideosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint generates a new video using a Replica and a script.   The only required body parameters are `replica_id` and `script`. The `replica_id` is a unique identifier for the Replica that will be used to generate the video. The `script` is the text that will be spoken by the Replica in the video.  If a `background_url` is provided, Tavus will record a video of the website and use it as the background for the video. If a `background_source_url` is provided, where the URL points to a download link such as a presigned S3 URL, Tavus will use the video as the background for the video. If neither are provided, the video will consist of a full screen Replica.  To learn more about generating videos with Replicas, see [here](https://docs.tavusapi.com/api-reference).  To learn more about writing an effective script for your video, see [Scripting prompting](https://docs.tavusapi.com/api-reference). 
         * @summary Generate Video
         * @param {VideosCreateVideoFromReplicaAndScriptRequest} [videosCreateVideoFromReplicaAndScriptRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVideoFromReplicaAndScript: async (videosCreateVideoFromReplicaAndScriptRequest?: VideosCreateVideoFromReplicaAndScriptRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/videos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: videosCreateVideoFromReplicaAndScriptRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/videos',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(videosCreateVideoFromReplicaAndScriptRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint deletes a single video by its unique identifier. 
         * @summary Delete Video
         * @param {string} videoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByVideoId: async (videoId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('deleteByVideoId', 'videoId', videoId)
            const localVarPath = `/v2/videos/{video_id}`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/videos/{video_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a list of all videos that have been generated by the API Key in use.  
         * @summary List Videos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/videos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/videos',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a single video by its unique identifier.   The response body will contain a `status` string that represents the status of the video. If the video is ready, the response body will also contain a `download_url`, `stream_url`, and `hosted_url` that can be used to download, stream, and view the video respectively. 
         * @summary Get Video
         * @param {string} videoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByVideoId: async (videoId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getByVideoId', 'videoId', videoId)
            const localVarPath = `/v2/videos/{video_id}`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/videos/{video_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint renames a single video by its unique identifier. 
         * @summary Rename Video
         * @param {string} videoId 
         * @param {VideosUpdateNameRequest} [videosUpdateNameRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateName: async (videoId: string, videosUpdateNameRequest?: VideosUpdateNameRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('updateName', 'videoId', videoId)
            const localVarPath = `/v2/videos/{video_id}/name`
                .replace(`{${"video_id"}}`, encodeURIComponent(String(videoId !== undefined ? videoId : `-video_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: videosUpdateNameRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/videos/{video_id}/name',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(videosUpdateNameRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VideosApi - functional programming interface
 * @export
 */
export const VideosApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VideosApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint generates a new video using a Replica and a script.   The only required body parameters are `replica_id` and `script`. The `replica_id` is a unique identifier for the Replica that will be used to generate the video. The `script` is the text that will be spoken by the Replica in the video.  If a `background_url` is provided, Tavus will record a video of the website and use it as the background for the video. If a `background_source_url` is provided, where the URL points to a download link such as a presigned S3 URL, Tavus will use the video as the background for the video. If neither are provided, the video will consist of a full screen Replica.  To learn more about generating videos with Replicas, see [here](https://docs.tavusapi.com/api-reference).  To learn more about writing an effective script for your video, see [Scripting prompting](https://docs.tavusapi.com/api-reference). 
         * @summary Generate Video
         * @param {VideosApiCreateVideoFromReplicaAndScriptRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVideoFromReplicaAndScript(requestParameters: VideosApiCreateVideoFromReplicaAndScriptRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VideosCreateVideoFromReplicaAndScriptResponse>> {
            const videosCreateVideoFromReplicaAndScriptRequest: VideosCreateVideoFromReplicaAndScriptRequest = {
                background_source_url: requestParameters.background_source_url,
                background_url: requestParameters.background_url,
                replica_id: requestParameters.replica_id,
                script: requestParameters.script,
                video_name: requestParameters.video_name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createVideoFromReplicaAndScript(videosCreateVideoFromReplicaAndScriptRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint deletes a single video by its unique identifier. 
         * @summary Delete Video
         * @param {VideosApiDeleteByVideoIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteByVideoId(requestParameters: VideosApiDeleteByVideoIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteByVideoId(requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns a list of all videos that have been generated by the API Key in use.  
         * @summary List Videos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VideosGetAllResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns a single video by its unique identifier.   The response body will contain a `status` string that represents the status of the video. If the video is ready, the response body will also contain a `download_url`, `stream_url`, and `hosted_url` that can be used to download, stream, and view the video respectively. 
         * @summary Get Video
         * @param {VideosApiGetByVideoIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByVideoId(requestParameters: VideosApiGetByVideoIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VideosGetByVideoIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByVideoId(requestParameters.videoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint renames a single video by its unique identifier. 
         * @summary Rename Video
         * @param {VideosApiUpdateNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateName(requestParameters: VideosApiUpdateNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const videosUpdateNameRequest: VideosUpdateNameRequest = {
                video_name: requestParameters.video_name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateName(requestParameters.videoId, videosUpdateNameRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VideosApi - factory interface
 * @export
 */
export const VideosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VideosApiFp(configuration)
    return {
        /**
         * This endpoint generates a new video using a Replica and a script.   The only required body parameters are `replica_id` and `script`. The `replica_id` is a unique identifier for the Replica that will be used to generate the video. The `script` is the text that will be spoken by the Replica in the video.  If a `background_url` is provided, Tavus will record a video of the website and use it as the background for the video. If a `background_source_url` is provided, where the URL points to a download link such as a presigned S3 URL, Tavus will use the video as the background for the video. If neither are provided, the video will consist of a full screen Replica.  To learn more about generating videos with Replicas, see [here](https://docs.tavusapi.com/api-reference).  To learn more about writing an effective script for your video, see [Scripting prompting](https://docs.tavusapi.com/api-reference). 
         * @summary Generate Video
         * @param {VideosApiCreateVideoFromReplicaAndScriptRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVideoFromReplicaAndScript(requestParameters: VideosApiCreateVideoFromReplicaAndScriptRequest, options?: AxiosRequestConfig): AxiosPromise<VideosCreateVideoFromReplicaAndScriptResponse> {
            return localVarFp.createVideoFromReplicaAndScript(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint deletes a single video by its unique identifier. 
         * @summary Delete Video
         * @param {VideosApiDeleteByVideoIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByVideoId(requestParameters: VideosApiDeleteByVideoIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteByVideoId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a list of all videos that have been generated by the API Key in use.  
         * @summary List Videos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(options?: AxiosRequestConfig): AxiosPromise<VideosGetAllResponse> {
            return localVarFp.getAll(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a single video by its unique identifier.   The response body will contain a `status` string that represents the status of the video. If the video is ready, the response body will also contain a `download_url`, `stream_url`, and `hosted_url` that can be used to download, stream, and view the video respectively. 
         * @summary Get Video
         * @param {VideosApiGetByVideoIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByVideoId(requestParameters: VideosApiGetByVideoIdRequest, options?: AxiosRequestConfig): AxiosPromise<VideosGetByVideoIdResponse> {
            return localVarFp.getByVideoId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint renames a single video by its unique identifier. 
         * @summary Rename Video
         * @param {VideosApiUpdateNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateName(requestParameters: VideosApiUpdateNameRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createVideoFromReplicaAndScript operation in VideosApi.
 * @export
 * @interface VideosApiCreateVideoFromReplicaAndScriptRequest
 */
export type VideosApiCreateVideoFromReplicaAndScriptRequest = {
    
} & VideosCreateVideoFromReplicaAndScriptRequest

/**
 * Request parameters for deleteByVideoId operation in VideosApi.
 * @export
 * @interface VideosApiDeleteByVideoIdRequest
 */
export type VideosApiDeleteByVideoIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof VideosApiDeleteByVideoId
    */
    readonly videoId: string
    
}

/**
 * Request parameters for getByVideoId operation in VideosApi.
 * @export
 * @interface VideosApiGetByVideoIdRequest
 */
export type VideosApiGetByVideoIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof VideosApiGetByVideoId
    */
    readonly videoId: string
    
}

/**
 * Request parameters for updateName operation in VideosApi.
 * @export
 * @interface VideosApiUpdateNameRequest
 */
export type VideosApiUpdateNameRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof VideosApiUpdateName
    */
    readonly videoId: string
    
} & VideosUpdateNameRequest

/**
 * VideosApiGenerated - object-oriented interface
 * @export
 * @class VideosApiGenerated
 * @extends {BaseAPI}
 */
export class VideosApiGenerated extends BaseAPI {
    /**
     * This endpoint generates a new video using a Replica and a script.   The only required body parameters are `replica_id` and `script`. The `replica_id` is a unique identifier for the Replica that will be used to generate the video. The `script` is the text that will be spoken by the Replica in the video.  If a `background_url` is provided, Tavus will record a video of the website and use it as the background for the video. If a `background_source_url` is provided, where the URL points to a download link such as a presigned S3 URL, Tavus will use the video as the background for the video. If neither are provided, the video will consist of a full screen Replica.  To learn more about generating videos with Replicas, see [here](https://docs.tavusapi.com/api-reference).  To learn more about writing an effective script for your video, see [Scripting prompting](https://docs.tavusapi.com/api-reference). 
     * @summary Generate Video
     * @param {VideosApiCreateVideoFromReplicaAndScriptRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApiGenerated
     */
    public createVideoFromReplicaAndScript(requestParameters: VideosApiCreateVideoFromReplicaAndScriptRequest, options?: AxiosRequestConfig) {
        return VideosApiFp(this.configuration).createVideoFromReplicaAndScript(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint deletes a single video by its unique identifier. 
     * @summary Delete Video
     * @param {VideosApiDeleteByVideoIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApiGenerated
     */
    public deleteByVideoId(requestParameters: VideosApiDeleteByVideoIdRequest, options?: AxiosRequestConfig) {
        return VideosApiFp(this.configuration).deleteByVideoId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns a list of all videos that have been generated by the API Key in use.  
     * @summary List Videos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApiGenerated
     */
    public getAll(options?: AxiosRequestConfig) {
        return VideosApiFp(this.configuration).getAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns a single video by its unique identifier.   The response body will contain a `status` string that represents the status of the video. If the video is ready, the response body will also contain a `download_url`, `stream_url`, and `hosted_url` that can be used to download, stream, and view the video respectively. 
     * @summary Get Video
     * @param {VideosApiGetByVideoIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApiGenerated
     */
    public getByVideoId(requestParameters: VideosApiGetByVideoIdRequest, options?: AxiosRequestConfig) {
        return VideosApiFp(this.configuration).getByVideoId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint renames a single video by its unique identifier. 
     * @summary Rename Video
     * @param {VideosApiUpdateNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApiGenerated
     */
    public updateName(requestParameters: VideosApiUpdateNameRequest, options?: AxiosRequestConfig) {
        return VideosApiFp(this.configuration).updateName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
