/* tslint:disable */
/* eslint-disable */
/*
Tavus Developer API Collection

We're an AI video research company making personalized video possible at scale. Generate videos of yourself, and never record again! Available via web app & developer APIs.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ReplicasCreateNewReplicaRequest } from '../models';
// @ts-ignore
import { ReplicasCreateNewReplicaResponse } from '../models';
// @ts-ignore
import { ReplicasGetReplicaByIdResponse } from '../models';
// @ts-ignore
import { ReplicasListResponse } from '../models';
// @ts-ignore
import { ReplicasRenameReplicaByIdRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ReplicasApi - axios parameter creator
 * @export
 */
export const ReplicasApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint creates a new Replica that can be used to generate personalized videos.   The only required body parameter is `train_video_url`. This url must be a download link such as a presigned S3 url. Please ensure you pass in a video that meets the [requirements](https://docs.tavusapi.com/api-reference) for training.  Replica training will fail without the following consent statement being present at the beginning of the video: > I, [FULL NAME], am currently speaking and consent Tavus to create an AI clone of me by using the audio and video samples I provide. I understand that this AI clone can be used to create videos that look and sound like me.  Learn more about the consent statement [here](https://docs.tavusapi.com/api-reference).  Learn more about training a personal Replica [here](https://docs.tavusapi.com/api-reference). 
         * @summary Create Replica
         * @param {ReplicasCreateNewReplicaRequest} [replicasCreateNewReplicaRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewReplica: async (replicasCreateNewReplicaRequest?: ReplicasCreateNewReplicaRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/replicas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: replicasCreateNewReplicaRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/replicas',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(replicasCreateNewReplicaRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint deletes a single Replica by its unique identifier. Once deleted, this Replica can not be used to generate videos. 
         * @summary Delete Replica
         * @param {string} replicaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByReplicaId: async (replicaId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'replicaId' is not null or undefined
            assertParamExists('deleteByReplicaId', 'replicaId', replicaId)
            const localVarPath = `/v2/replicas/{replica_id}`
                .replace(`{${"replica_id"}}`, encodeURIComponent(String(replicaId !== undefined ? replicaId : `-replica_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/replicas/{replica_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a single Replica by its unique identifier.   Included in the response body is a `training_progress` string that represents the progress of the Replica training. If there are any errors during training, the `status` will be `error` and the `error_message` will be populated. 
         * @summary Get Replica
         * @param {string} replicaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReplicaById: async (replicaId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'replicaId' is not null or undefined
            assertParamExists('getReplicaById', 'replicaId', replicaId)
            const localVarPath = `/v2/replicas/{replica_id}`
                .replace(`{${"replica_id"}}`, encodeURIComponent(String(replicaId !== undefined ? replicaId : `-replica_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/replicas/{replica_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a list of all replicas that have been created by the API Key in use. In the response, a root level `data` key will contain the list of Replicas. 
         * @summary List Replicas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/replicas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/replicas',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint renames a single Replica by its unique identifier.  
         * @summary Rename Replica
         * @param {string} replicaId 
         * @param {ReplicasRenameReplicaByIdRequest} [replicasRenameReplicaByIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renameReplicaById: async (replicaId: string, replicasRenameReplicaByIdRequest?: ReplicasRenameReplicaByIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'replicaId' is not null or undefined
            assertParamExists('renameReplicaById', 'replicaId', replicaId)
            const localVarPath = `/v2/replicas/{replica_id}/name`
                .replace(`{${"replica_id"}}`, encodeURIComponent(String(replicaId !== undefined ? replicaId : `-replica_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-api-key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: replicasRenameReplicaByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/replicas/{replica_id}/name',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(replicasRenameReplicaByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReplicasApi - functional programming interface
 * @export
 */
export const ReplicasApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReplicasApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint creates a new Replica that can be used to generate personalized videos.   The only required body parameter is `train_video_url`. This url must be a download link such as a presigned S3 url. Please ensure you pass in a video that meets the [requirements](https://docs.tavusapi.com/api-reference) for training.  Replica training will fail without the following consent statement being present at the beginning of the video: > I, [FULL NAME], am currently speaking and consent Tavus to create an AI clone of me by using the audio and video samples I provide. I understand that this AI clone can be used to create videos that look and sound like me.  Learn more about the consent statement [here](https://docs.tavusapi.com/api-reference).  Learn more about training a personal Replica [here](https://docs.tavusapi.com/api-reference). 
         * @summary Create Replica
         * @param {ReplicasApiCreateNewReplicaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewReplica(requestParameters: ReplicasApiCreateNewReplicaRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReplicasCreateNewReplicaResponse>> {
            const replicasCreateNewReplicaRequest: ReplicasCreateNewReplicaRequest = {
                callback_url: requestParameters.callback_url,
                replica_name: requestParameters.replica_name,
                train_video_url: requestParameters.train_video_url
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewReplica(replicasCreateNewReplicaRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint deletes a single Replica by its unique identifier. Once deleted, this Replica can not be used to generate videos. 
         * @summary Delete Replica
         * @param {ReplicasApiDeleteByReplicaIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteByReplicaId(requestParameters: ReplicasApiDeleteByReplicaIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteByReplicaId(requestParameters.replicaId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns a single Replica by its unique identifier.   Included in the response body is a `training_progress` string that represents the progress of the Replica training. If there are any errors during training, the `status` will be `error` and the `error_message` will be populated. 
         * @summary Get Replica
         * @param {ReplicasApiGetReplicaByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReplicaById(requestParameters: ReplicasApiGetReplicaByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReplicasGetReplicaByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReplicaById(requestParameters.replicaId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns a list of all replicas that have been created by the API Key in use. In the response, a root level `data` key will contain the list of Replicas. 
         * @summary List Replicas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReplicasListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint renames a single Replica by its unique identifier.  
         * @summary Rename Replica
         * @param {ReplicasApiRenameReplicaByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async renameReplicaById(requestParameters: ReplicasApiRenameReplicaByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const replicasRenameReplicaByIdRequest: ReplicasRenameReplicaByIdRequest = {
                replica_name: requestParameters.replica_name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.renameReplicaById(requestParameters.replicaId, replicasRenameReplicaByIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReplicasApi - factory interface
 * @export
 */
export const ReplicasApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReplicasApiFp(configuration)
    return {
        /**
         * This endpoint creates a new Replica that can be used to generate personalized videos.   The only required body parameter is `train_video_url`. This url must be a download link such as a presigned S3 url. Please ensure you pass in a video that meets the [requirements](https://docs.tavusapi.com/api-reference) for training.  Replica training will fail without the following consent statement being present at the beginning of the video: > I, [FULL NAME], am currently speaking and consent Tavus to create an AI clone of me by using the audio and video samples I provide. I understand that this AI clone can be used to create videos that look and sound like me.  Learn more about the consent statement [here](https://docs.tavusapi.com/api-reference).  Learn more about training a personal Replica [here](https://docs.tavusapi.com/api-reference). 
         * @summary Create Replica
         * @param {ReplicasApiCreateNewReplicaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewReplica(requestParameters: ReplicasApiCreateNewReplicaRequest, options?: AxiosRequestConfig): AxiosPromise<ReplicasCreateNewReplicaResponse> {
            return localVarFp.createNewReplica(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint deletes a single Replica by its unique identifier. Once deleted, this Replica can not be used to generate videos. 
         * @summary Delete Replica
         * @param {ReplicasApiDeleteByReplicaIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByReplicaId(requestParameters: ReplicasApiDeleteByReplicaIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteByReplicaId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a single Replica by its unique identifier.   Included in the response body is a `training_progress` string that represents the progress of the Replica training. If there are any errors during training, the `status` will be `error` and the `error_message` will be populated. 
         * @summary Get Replica
         * @param {ReplicasApiGetReplicaByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReplicaById(requestParameters: ReplicasApiGetReplicaByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ReplicasGetReplicaByIdResponse> {
            return localVarFp.getReplicaById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a list of all replicas that have been created by the API Key in use. In the response, a root level `data` key will contain the list of Replicas. 
         * @summary List Replicas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options?: AxiosRequestConfig): AxiosPromise<ReplicasListResponse> {
            return localVarFp.list(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint renames a single Replica by its unique identifier.  
         * @summary Rename Replica
         * @param {ReplicasApiRenameReplicaByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renameReplicaById(requestParameters: ReplicasApiRenameReplicaByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.renameReplicaById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewReplica operation in ReplicasApi.
 * @export
 * @interface ReplicasApiCreateNewReplicaRequest
 */
export type ReplicasApiCreateNewReplicaRequest = {
    
} & ReplicasCreateNewReplicaRequest

/**
 * Request parameters for deleteByReplicaId operation in ReplicasApi.
 * @export
 * @interface ReplicasApiDeleteByReplicaIdRequest
 */
export type ReplicasApiDeleteByReplicaIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ReplicasApiDeleteByReplicaId
    */
    readonly replicaId: string
    
}

/**
 * Request parameters for getReplicaById operation in ReplicasApi.
 * @export
 * @interface ReplicasApiGetReplicaByIdRequest
 */
export type ReplicasApiGetReplicaByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ReplicasApiGetReplicaById
    */
    readonly replicaId: string
    
}

/**
 * Request parameters for renameReplicaById operation in ReplicasApi.
 * @export
 * @interface ReplicasApiRenameReplicaByIdRequest
 */
export type ReplicasApiRenameReplicaByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ReplicasApiRenameReplicaById
    */
    readonly replicaId: string
    
} & ReplicasRenameReplicaByIdRequest

/**
 * ReplicasApiGenerated - object-oriented interface
 * @export
 * @class ReplicasApiGenerated
 * @extends {BaseAPI}
 */
export class ReplicasApiGenerated extends BaseAPI {
    /**
     * This endpoint creates a new Replica that can be used to generate personalized videos.   The only required body parameter is `train_video_url`. This url must be a download link such as a presigned S3 url. Please ensure you pass in a video that meets the [requirements](https://docs.tavusapi.com/api-reference) for training.  Replica training will fail without the following consent statement being present at the beginning of the video: > I, [FULL NAME], am currently speaking and consent Tavus to create an AI clone of me by using the audio and video samples I provide. I understand that this AI clone can be used to create videos that look and sound like me.  Learn more about the consent statement [here](https://docs.tavusapi.com/api-reference).  Learn more about training a personal Replica [here](https://docs.tavusapi.com/api-reference). 
     * @summary Create Replica
     * @param {ReplicasApiCreateNewReplicaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReplicasApiGenerated
     */
    public createNewReplica(requestParameters: ReplicasApiCreateNewReplicaRequest, options?: AxiosRequestConfig) {
        return ReplicasApiFp(this.configuration).createNewReplica(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint deletes a single Replica by its unique identifier. Once deleted, this Replica can not be used to generate videos. 
     * @summary Delete Replica
     * @param {ReplicasApiDeleteByReplicaIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReplicasApiGenerated
     */
    public deleteByReplicaId(requestParameters: ReplicasApiDeleteByReplicaIdRequest, options?: AxiosRequestConfig) {
        return ReplicasApiFp(this.configuration).deleteByReplicaId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns a single Replica by its unique identifier.   Included in the response body is a `training_progress` string that represents the progress of the Replica training. If there are any errors during training, the `status` will be `error` and the `error_message` will be populated. 
     * @summary Get Replica
     * @param {ReplicasApiGetReplicaByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReplicasApiGenerated
     */
    public getReplicaById(requestParameters: ReplicasApiGetReplicaByIdRequest, options?: AxiosRequestConfig) {
        return ReplicasApiFp(this.configuration).getReplicaById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns a list of all replicas that have been created by the API Key in use. In the response, a root level `data` key will contain the list of Replicas. 
     * @summary List Replicas
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReplicasApiGenerated
     */
    public list(options?: AxiosRequestConfig) {
        return ReplicasApiFp(this.configuration).list(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint renames a single Replica by its unique identifier.  
     * @summary Rename Replica
     * @param {ReplicasApiRenameReplicaByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReplicasApiGenerated
     */
    public renameReplicaById(requestParameters: ReplicasApiRenameReplicaByIdRequest, options?: AxiosRequestConfig) {
        return ReplicasApiFp(this.configuration).renameReplicaById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
